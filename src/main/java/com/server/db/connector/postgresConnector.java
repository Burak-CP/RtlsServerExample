package com.server.db.connector;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;

import com.server.utils.logger;

public class postgresConnector {

	private final String url = "jdbc:postgresql://localhost:27500/testdb";
	private final String user = "bba";
	private final String password = "bba";
	protected Connection conn = null;
	protected PreparedStatement pstmt = null;
	private int statementIndex = 1;
	Statement stmt = null;

	public postgresConnector() {
		try {
			Class.forName("org.postgresql.Driver");
			connect();
		} catch (Exception e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	protected boolean connect() {
		boolean isConnected = false;
		try {
			conn = DriverManager.getConnection(url, user, password);
			isConnected = true;
		} catch (Exception e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
		return isConnected;
	}

	public Integer getTableSize(String tableName) {
		int count = 0;
		String sql = "SELECT count(*) FROM " + tableName;
		ResultSet resultset = null;

		try {
			stmt = conn.createStatement();
			resultset = stmt.executeQuery(sql);

			resultset.next();
			count = resultset.getInt(1);

			resultset.close();
			stmt.close();
			closeStatements();
		} catch (Exception e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
		return count;
	}

	public boolean isTableExist(String tableName) {
		boolean isEmpty = false;
		ResultSet resultset = null;
		try {
			DatabaseMetaData dmd = conn.getMetaData();
			resultset = dmd.getTables(null, null, tableName, null);
			resultset.next();
			if (resultset.getRow() > 0) {
				resultset.close();
				dmd = null;
				isEmpty = true;
			}
			closeStatements();
		} catch (Exception e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
		return isEmpty;
	}

	public void createPrepareStatement(String sql, int autoGeneratedKeys) {
		try {
			pstmt = conn.prepareStatement(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	public void createPrepareStatement(String sql) {
		try {
			pstmt = conn.prepareStatement(sql);
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	public void closeStatements() {
		try {
			statementIndex = 1;
			if (pstmt != null) {
				pstmt.close();
			}
			if (stmt != null) {
				stmt.close();
			}
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	public void setTimestamp(Timestamp value) {
		try {
			pstmt.setTimestamp(statementIndex++, value);
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	public void setBoolean(boolean value) {
		try {
			pstmt.setBoolean(statementIndex++, value);
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	public void setLong(long value) {
		try {
			pstmt.setLong(statementIndex++, value);
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	public void setFloat(float value) {
		try {
			pstmt.setFloat(statementIndex++, value);
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	public void setString(String value) {
		try {
			pstmt.setString(statementIndex++, value);
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	public void setInt(int value) {
		try {
			pstmt.setInt(statementIndex++, value);
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}

	public synchronized int executeUpdate() {
		int result = -1;
		try {
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
		return result;
	}

	public ResultSet executeQuery() {
		ResultSet result = null;
		try {
			result = pstmt.executeQuery();
			stmt.close();
		} catch (Exception e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
		return result;
	}

	public ResultSet executeQuery(String sql) {
		ResultSet result = null;
		try {
			stmt = conn.createStatement();
			result = stmt.executeQuery(sql);
		} catch (Exception e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
		return result;
	}

	public synchronized boolean execute(String sql) {
		boolean result = false;
		try {
			stmt = conn.createStatement();
			result = stmt.execute(sql);
			stmt.close();
		} catch (Exception e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
		return result;
	}

	public ResultSet getGeneratedKeys() {
		ResultSet rs = null;
		try {
			rs = pstmt.getGeneratedKeys();
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
		return rs;
	}

	public void disconnect() {
		try {
			closeStatements();
			conn.close();
		} catch (SQLException e) {
			logger.ErrorLogger(postgresConnector.class, e);
		}
	}
}
